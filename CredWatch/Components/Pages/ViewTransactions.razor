@page "/viewTransactions"
@using CredWatch.Models
@using CredWatch.Services
@using CredWatch.DTOs
@inject ITransactionService transactionService
@inject IDebtService debtService
@inject AuthStateService authStateService
@inject NavigationManager navigationManager


<h3>All Transactions</h3>
<br />

@* Filters *@
<div>
    <h4>Filters</h4>

    <div class="d-flex flex-row align-items-start justify-content-center gap-4">
        <div>
            <label>Category:</label>
            <select @bind="filterCategory" class="form-select">
                <option value="NoFilter">No Filter</option>
                <option value="Credit">Credit</option>
                <option value="Debit">Debit</option>
                <option value="Debt">Debt</option>
            </select>
        </div>
        <div>
            <label>Tag:</label>
            <select @bind="filterTag" class="form-select">
                <option value="NoFilter">No Filter</option>
                <option value="Monthly">Monthly</option>
                <option value="Yearly">Yearly</option>
                <option value="Rent">Rent</option>
                <option value="Fuel">Fuel</option>
            </select>
        </div>
        <div>
            <label>Date From</label>
            <input type="date" class="form-control" @bind="filterDateFrom" />
        </div>
        <div>
            <label>Date To</label>
            <input type="date" class="form-control" @bind="filterDateTo" />
        </div>
        <div>
            <label>Specific Date</label>
            <input type="date" class="form-control" @bind="filterSpecificDate" />
        </div>
    </div>

    <div class="mt-2">
        <label class="text-center">Search</label>
        <input type="search" class="form-control" @bind="keywords" />
    </div>
    <div class="d-flex flex-row align-items-start justify-content-center gap-4 mt-2">
        <div>
            <label>Sort By</label>
            <select @bind="selectedSortOption" class="form-select">
                <option value="">None</option>
                <option value="TransactionId">Transaction ID</option>
                <option value="CreatedDate">Created Date</option>
            </select>
        </div>
        <div>
            <label>Sort Direction</label>
            <select @bind="sortDirection" class="form-select">
                <option value="Ascending">Ascending</option>
                <option value="Descending">Descending</option>
            </select>
        </div>
    </div>
</div>
<br />

@if (filterCategory != "Debt")
{
    <div class="p-2" style="background-color: #5A189A">
        <h4 class="text-center">Inflows and Outflows</h4>
        <table class="table table-striped table-bordered table-hover b mt-4" style="background-color:#E0AAFF; border-radius: 10px; overflow: hidden;">
            <thead>
                <tr>
                    <th style="color:#240046">Id</th>
                    <th style="color:#240046">Category</th>
                    <th style="color:#240046">Tag</th>
                    <th style="color:#240046">Amount</th>
                    <th style="color:#240046">Created Date</th>
                    <th style="color:#240046">Title</th>
                    <th style="color:#240046">Note</th>
                </tr>
            </thead>
            <tbody>
                @if (sortedTransactions.Any())
                {
                    @foreach (var transaction in sortedTransactions)
                    {
                        <tr>
                            <th style="color:#240046">@transaction.TransactionId</th>
                            <th style="color:#240046">@transaction.Category</th>
                            <th style="color:#240046">@transaction.Tag</th>
                            <th style="color:#240046">@transaction.Amount</th>
                            <th style="color:#240046">@transaction.CreatedDate</th>
                            <th style="color:#240046">@transaction.Title</th>
                            <th style="color:#240046">@transaction.Note</th>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
}

@if (!(filterCategory == "Credit" || filterCategory == "Debit"))
{
    <br />
    <div class="p-2" style="background-color: #5A189A">
        <h4 class="text-center">Debt</h4>
        <table class ="table table-striped table-bordered table-hover b mt-4" style="background-color:#E0AAFF; border-radius: 10px; overflow: hidden;">
            <thead>
                <tr >
                    <th style="color:#240046">Id</th>
                    <th style="color:#240046">Category</th>
                    <th style="color:#240046">Tag</th>
                    <th style="color:#240046">Amount</th>
                    <th style="color:#240046">Created Date</th>
                    <th style="color:#240046">Due Date</th>
                    <th style="color:#240046">Source</th>
                    <th style="color:#240046">Title</th>
                    <th style="color:#240046">Note</th>
                    <th style="color:#240046">IsCleared</th>
                </tr>
            </thead>
            <tbody>
                @if (sortedDebts.Any())
                {
                    @foreach (var debt in sortedDebts)
                    {
                        <tr >
                            <th style="color:#240046">@debt.TransactionId</th>
                            <th style="color:#240046">@debt.Category</th>
                            <th style="color:#240046">@debt.Tag</th>
                            <th style="color:#240046">@debt.Amount</th>
                            <th style="color:#240046">@debt.CreatedDate</th>
                            <th style="color:#240046">@debt.DueDate</th>
                            <th style="color:#240046">@debt.Source</th>
                            <th style="color:#240046">@debt.Title</th>
                            <th style="color:#240046">@debt.Note</th>
                            <th style="color:#240046">@debt.IsCleared</th>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
    private User loggedInUser = new User();

    private List<Transaction> userTransactions = new List<Transaction>();
    private List<Transaction> creditDebitTransactions = new List<Transaction>();
    private List<Transaction> debtTransactions = new List<Transaction>();

    private List<DebtDetailsDTO> debtDetails = new List<DebtDetailsDTO>();

    private BalanceDTO balances = new BalanceDTO();

    //for filters
    private IEnumerable<Transaction> filteredTransactions => FilterTransactions();
    private IEnumerable<Transaction> sortedTransactions => SortTransactions(filteredTransactions);

    private IEnumerable<DebtDetailsDTO> filteredDebts => FilterDebts();
    private IEnumerable<DebtDetailsDTO> sortedDebts => SortDebts(filteredDebts);

    //Filter Properties
    private string filterCategory = "NoFilter";
    private string filterTag = "NoFilter";
    private DateTime? filterDateFrom;
    private DateTime? filterDateTo;
    private DateTime? filterSpecificDate;
    private string keywords;
    private string selectedSortOption;
    private string sortDirection;


    protected override async Task OnInitializedAsync()
    {
        while (!authStateService.IsDataLoaded)
        {
            await Task.Delay(100); // Wait until data is loaded
        }

        loggedInUser = authStateService.GetLoggedInUser();
        balances = authStateService.GetBalances();
        userTransactions = authStateService.UserTransactions;
        creditDebitTransactions = authStateService.CreditDebitTransactions;
        debtTransactions = authStateService.DebtTransactions;
        debtDetails = authStateService.DebtDetails;
    }

    // Filter and sorting
    private IEnumerable<Transaction> FilterTransactions()
    {
        var filtered = creditDebitTransactions.AsQueryable();

        if (!string.IsNullOrEmpty(filterCategory) && filterCategory != "NoFilter")
        {
            filtered = filtered.Where(t => t.Category == filterCategory);
        }

        if (filterTag != "NoFilter")
        {
            filtered = filtered.Where(t => t.Tag.Contains(filterTag));
        }

        if (!string.IsNullOrEmpty(keywords))
        {
            filtered = filtered.Where(t => t.Title.Contains(keywords, StringComparison.OrdinalIgnoreCase));
        }

        if (filterSpecificDate.HasValue)
        {
            filtered = filtered.Where(t => t.CreatedDate.Date == filterSpecificDate.Value.Date);
        }
        else if (filterDateFrom.HasValue || filterDateTo.HasValue)
        {
            filtered = filtered.Where(t =>
                (!filterDateFrom.HasValue || t.CreatedDate.Date >= filterDateFrom.Value.Date) &&
                (!filterDateTo.HasValue || t.CreatedDate.Date <= filterDateTo.Value.Date));
        }

        return filtered;
    }


    private IEnumerable<Transaction> SortTransactions(IEnumerable<Transaction> filteredTransactions)
    {
        return (selectedSortOption, sortDirection) switch
        {
            ("TransactionId", "Ascending") => filteredTransactions.OrderBy(t => t.TransactionId),
            ("TransactionId", "Descending") => filteredTransactions.OrderByDescending(t => t.TransactionId),
            ("CreatedDate", "Ascending") => filteredTransactions.OrderBy(t => t.CreatedDate),
            ("CreatedDate", "Descending") => filteredTransactions.OrderByDescending(t => t.CreatedDate),
            _ => filteredTransactions
        };
    }

    // for debt
    private IEnumerable<DebtDetailsDTO> FilterDebts()
    {
        var filtered = debtDetails.AsQueryable();

        if (!string.IsNullOrEmpty(filterCategory) && filterCategory != "NoFilter")
        {
            filtered = filtered.Where(t => t.Category == filterCategory);
        }

        if (filterTag != "NoFilter")
        {
            filtered = filtered.Where(t => t.Tag.Contains(filterTag));
        }

        if (!string.IsNullOrEmpty(keywords))
        {
            filtered = filtered.Where(t => t.Title.Contains(keywords, StringComparison.OrdinalIgnoreCase));
        }

        if (filterSpecificDate.HasValue)
        {
            filtered = filtered.Where(t => t.CreatedDate.Date == filterSpecificDate.Value.Date);
        }
        else if (filterDateFrom.HasValue || filterDateTo.HasValue)
        {
            filtered = filtered.Where(t =>
                (!filterDateFrom.HasValue || t.CreatedDate.Date >= filterDateFrom.Value.Date) &&
                (!filterDateTo.HasValue || t.CreatedDate.Date <= filterDateTo.Value.Date));
        }

        return filtered;
    }


    private IEnumerable<DebtDetailsDTO> SortDebts(IEnumerable<DebtDetailsDTO> filteredDebts)
    {
        return (selectedSortOption, sortDirection) switch
        {
            ("TransactionId", "Ascending") => filteredDebts.OrderBy(t => t.TransactionId),
            ("TransactionId", "Descending") => filteredDebts.OrderByDescending(t => t.TransactionId),
            ("CreatedDate", "Ascending") => filteredDebts.OrderBy(t => t.CreatedDate),
            ("CreatedDate", "Descending") => filteredDebts.OrderByDescending(t => t.CreatedDate),
            _ => filteredDebts
        };
    }

}
