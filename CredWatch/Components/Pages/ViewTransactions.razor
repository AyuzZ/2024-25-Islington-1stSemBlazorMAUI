@page "/viewTransactions"
@using CredWatch.Models
@using CredWatch.Services
@inject ITransactionService transactionService
@inject IDebtService debtService
@inject AuthStateService authStateService
@inject NavigationManager navigationManager

<h3>All Transactions</h3>

<h4>Username: @loggedInUser.Username</h4>
<h4>Current Balance: @currentBalance</h4>

@* Filters *@
@* <div> *@
@*     <h4>Filters</h4> *@
@*     <div> *@
@*         <label>Category:</label> *@
@*         <select @bind="filterCategory"> *@
@*             <option value="NoFilter">No Filter</option> *@
@*             <option value="Credit">Credit</option> *@
@*             <option value="Debit">Debit</option> *@
@*             <option value="Debt">Debt</option> *@
@*         </select> *@
@*     </div> *@
@*     <div> *@
@*         <label>Tag:</label> *@
@*         <select @bind="filterTag"> *@
@*             <option value="NoFilter">No Filter</option> *@
@*             <option value="Monthly">Monthly</option> *@
@*             <option value="Yearly">Yearly</option> *@
@*             <option value="Rent">Rent</option> *@
@*             <option value="Fuel">Fuel</option> *@
@*         </select> *@
@*     </div> *@
@*     <div>  *@
@*          <label>Date</label>  *@
@*          <input type="date" class="form-control" @bind="filterDate" />  *@
@*      </div>  *@
@*      <div>  *@
@*         <label>Date Range</label>  *@
@*         <input type="date" class="form-control" @bind="Date" />  *@
@*     </div> *@
@* </div> *@

<div>
    <h4>Inflows and Outflows</h4>
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Category</th>
                <th>Tag</th>
                <th>Amount</th>
                <th>Created Date</th>
                <th>Title</th>
                <th>Note</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in creditDebitTransactions)
            {

                <tr>
                    <th>@transaction.TransactionId</th>
                    <th>@transaction.CategoryId</th>
                    <th>@transaction.TagId</th>
                    <th>@transaction.Amount</th>
                    <th>@transaction.CreatedDate</th>
                    <th>@transaction.Title</th>
                    <th>@transaction.Note</th>
                </tr>
            }
        </tbody>
    </table>
</div>

<div>
    <h4>Debt</h4>
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Category</th>
                <th>Tag</th>
                <th>Amount</th>
                <th>Created Date</th>
                <th>Due Date</th>
                <th>Source</th>
                <th>Title</th>
                <th>Note</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debt in debts)
            {
                <tr>
                    <th>@debt.TransactionId</th>
                    <th>@debt.CategoryId</th>
                    <th>@debt.TagId</th>
                    <th>@debt.Amount</th>
                    <th>@debt.CreatedDate</th>
                    <th>@debt.DueDate</th>
                    <th>@debt.Source</th>
                    <th>@debt.Title</th>
                    <th>@debt.Note</th>
                    <th>@debt.Status</th>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private User loggedInUser = new User();

    private List<Transaction> userTransactions = new List<Transaction>();
    private List<Transaction> creditDebitTransactions = new List<Transaction>();
    private List<Transaction> debtTransactions = new List<Transaction>();

    private List<DisplayDebtModel> debts = new List<DisplayDebtModel>();

    private double currentBalance;
    private double totalInflow;
    private double totalOutflow;
    private double pendingDebt;
    private double clearedDebt;

    // private List<Transaction> filteredCreditDebitTransactions = new List<Transaction>();
    // private List<DisplayDebtModel> filteredDebts = new List<DisplayDebtModel>();

    // Filter Properties
    // private string filterCategory;
    // private string filterTag;
    // private DateTime filterDate;



    protected override async Task OnInitializedAsync()
    {
        await GetLoggedInUserDetailAsync();
        await GetLoggedInUsersTransactionsAsync();
        // separating debt from credit and debit (inflow and outflow)
        await SeparateDebtsFromOtherTransactions();
        // combining debt and its transaction to display debt model
        await GetDebtRecords();
        CalculateCurrentBalance();
    }

    private async Task GetLoggedInUserDetailAsync()
    {
        loggedInUser = authStateService.GetLoggedInUser();
        if (loggedInUser == null)
        {
            navigationManager.NavigateTo("/");
        }
    }

    private async Task GetLoggedInUsersTransactionsAsync()
    { 
        // all transactions belonging to the logged in user
        userTransactions = await transactionService.GetUsersTransactionsAsync(loggedInUser.UserId);  
    }

    private async Task SeparateDebtsFromOtherTransactions()
    {
        debtTransactions = userTransactions.Where(t => t.CategoryId == "Debt").ToList();

        creditDebitTransactions = userTransactions.Where(t => t.CategoryId != "Debt").ToList();
    }

    private async Task GetDebtRecords()
    {
        foreach (Transaction debtTransaction in debtTransactions)
        {
            // setting attributes already present in transaction obj
            DisplayDebtModel displayDebtModel = new DisplayDebtModel(debtTransaction.TransactionId, debtTransaction.Title, debtTransaction.Amount,
                debtTransaction.CreatedDate, debtTransaction.Note, debtTransaction.TagId, debtTransaction.UserId, debtTransaction.CategoryId);

            Debt debt = await debtService.GetDebtByTransactionIdAsync(debtTransaction.TransactionId);

            //setting the rest of the attributes
            displayDebtModel.DebtId = debt.DebtId;
            displayDebtModel.Source = debt.Source;
            displayDebtModel.DueDate = debt.DueDate;
            displayDebtModel.Status = debt.Status;

            // adding to the list
            debts.Add(displayDebtModel);
        }
    }

    private void CalculateCurrentBalance()
    {
        totalInflow = (double)creditDebitTransactions.Where(t => t.CategoryId == "Credit").Sum(t => t.Amount);
        totalOutflow = (double)creditDebitTransactions.Where(t => t.CategoryId == "Debit").Sum(t => t.Amount);
        pendingDebt = (double)debts.Where(d => d.Status == "Pending").Sum(d => d.Amount);
        clearedDebt = (double)debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);

        currentBalance = totalInflow + pendingDebt - totalOutflow - clearedDebt;
    }

    // private async Task FilterTransactions()
    // {
    //     filtering results from the filtered result
    //     if both category and tag are selected, tag result are filtered from the already filtered category result
    //     filteredCreditDebitTransactions = creditDebitTransactions;
    //     if (!(filterCategory == null || filterCategory == "NoFilter")){
    //         filteredCreditDebitTransactions = filteredCreditDebitTransactions.Where(t => t.CategoryId == filterCategory).ToList();
    //     }

    //     if (!(filterTag == null || filterTag == "NoFilter"))
    //     {
    //         filteredCreditDebitTransactions = filteredCreditDebitTransactions.Where(t => t.TagId == filterTag).ToList();
    //     }

    //     if (!(filterDate == null || filterTag == "NoFilter"))
    //     {
    //         creditDebitTransactions.Where(t => t.CreatedDate == filterDate).ToList();
    //     } 
    // }

    // private string FilterCategory
    // {
    //     get => filterCategory;
    //     set
    //     {
    //         filterCategory = value;
    //         FilterTransactions(); Trigger filtering when category changes
    //     }
    // }

    // private string FilterTag
    // {
    //     get => filterTag;
    //     set
    //     {
    //         filterTag = value;
    //         FilterTransactions(); Trigger filtering when tag changes
    //     }
    // }

}
