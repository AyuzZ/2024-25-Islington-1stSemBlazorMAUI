@page "/"
@using CredWatch.Models
@using CredWatch.Services
@using CredWatch.DTOs
@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthStateService authStateService

<div class="d-flex flex-column align-items-center justify-content-center mt-4 mb-0">
    <h3 class="mb-0 text-center">
        Don't have an account?
        <br />
        <a href="/signup" style="color:#E0AAFF">Sign Up</a>
    </h3>
</div>
<div class="rz-p-0 rz-p-md-12">
    <RadzenCard Variant="Variant.Outlined" class="rz-my-12 rz-mx-auto" Style="max-width: 420px; background-color:#5A189A">
        <RadzenStack Gap="1rem" class="rz-p-4">

            <RadzenFormField Text="Username" Variant="Variant.Outlined" Style="color:#5A189A">
                <RadzenTextBox @bind-Value="@loginUser.UserName" Style="background-color:#E0AAFF;" />
                <RadzenRequiredValidator Component="username" Text="Username is required" />
            </RadzenFormField>

            <RadzenFormField Text="Password" Variant="Variant.Outlined" Style="color:#5A189A">
                <RadzenPassword @bind-Value="@loginUser.Password" Style="background-color:#E0AAFF;" />
                <RadzenRequiredValidator Component="password" Text="Password is required" />
            </RadzenFormField>

            <RadzenButton Text="Submit" Click="LoginUser" Style="margin-top: 1rem; color:#E0AAFF; background-color:#230143; " />
        </RadzenStack>
    </RadzenCard>
</div>

@if (showErrorModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login Denied.</h5>
                    <button type="button" class="btn-close" @onclick="CloseErrorModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>@errorMessage</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private UserLoginDTO loginUser = new UserLoginDTO();
    
    private string errorMessage;
    private bool showErrorModal = false;

    private void CloseErrorModal()
    {
        showErrorModal = false;
    }

    private async Task LoginUser()
    {
        try
        {
            // Input Validation
            if (string.IsNullOrWhiteSpace(loginUser.UserName) ||
                string.IsNullOrWhiteSpace(loginUser.Password))
            {
                errorMessage = "All fields are required.";
                Console.WriteLine(errorMessage);
                throw new Exception(errorMessage);
            }

            var users = await userService.GetAllUsersAsync();
            var user = users.FirstOrDefault(u => u.Username == loginUser.UserName && u.Password == HashPassword(loginUser.Password));

            if (user != null)
            {
                // Set the authenticated user in state management
                authStateService.SetLoggedInUser(user);

                // Redirect to the dashboard or todo page
                navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid username or password.";
                Console.WriteLine(errorMessage);
                throw new Exception(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            showErrorModal = true;
            Console.WriteLine(errorMessage);
        }
    }

    private string HashPassword(string password)
    {
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(password);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hash);
        }
    }
}
