@page "/dashboard"
@using CredWatch.Models
@using CredWatch.Services
@using CredWatch.DTOs
@inject ITransactionService transactionService
@inject IDebtService debtService
@inject AuthStateService authStateService
@inject NavigationManager navigationManager

@if (!authStateService.IsDataLoaded)
{
    <p>Loading data...</p>
}
else
{
    <h3>Welcome to the Dashboard</h3>
    <br />

    <div class="d-flex flex-row align-items-center justify-content-center gap-4" >

        <div class="p-4" style="margin-right: 10px;">
            <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12" AlignItems="AlignItems.Center">
                <RadzenStack Style="width: 100%; max-width: 600px;">
                    <RadzenChart>
                        <RadzenPieSeries Data="@debtData" Title="Debt Status" CategoryProperty="Category" ValueProperty="Value">
                            <RadzenSeriesDataLabels Visible="true" />
                        </RadzenPieSeries>
                    </RadzenChart>
                </RadzenStack>
            </RadzenStack>
        </div>


        <div class="p-4" style="margin-left: 10px; background-color: #5A189A">
            <h4 class="text-center">Highest and Lowest</h4>
            <div class="text-center">
                <select @bind="sortDirection" class="form-select">
                    <option value="Highest">Highest</option>
                    <option value="Lowest">Lowest</option>
                </select>
            </div>
            <table class="table table-striped table-bordered table-hover b mt-4" style="background-color:#E0AAFF; border-radius: 10px; overflow: hidden;">
                <thead>
                    <tr>
                        <th style="color:#240046">Id</th>
                        <th style="color:#240046">Category</th>
                        <th style="color:#240046">Tag</th>
                        <th style="color:#240046">Amount</th>
                        <th style="color:#240046">Created Date</th>
                        <th style="color:#240046">Title</th>
                    </tr>
                </thead>
                <tbody>
                    @if (sortedTransactions.Any())
                    {
                        @foreach (var transaction in sortedTransactions)
                        {
                            <tr>
                                <th style="color:#240046">@transaction.TransactionId</th>
                                <th style="color:#240046">@transaction.Category</th>
                                <th style="color:#240046">@transaction.Tag</th>
                                <th style="color:#240046">@transaction.Amount</th>
                                <th style="color:#240046">@transaction.CreatedDate</th>
                                <th style="color:#240046">@transaction.Title</th>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="rz-p-0 rz-p-md-12">
            <RadzenCard Variant="Variant.Outlined" class="rz-my-12 rz-mx-auto" Style="max-width: 420px; background-color: #E0AAFF;">
                <RadzenStack Gap="1rem" class="rz-p-4">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mb-0">Inflow Count</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@balances.InflowsCount</b></RadzenText>
                    </RadzenStack>

                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mb-0">Outflow Count</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@balances.OutflowsCount</b></RadzenText>
                    </RadzenStack>
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mb-0">Debt Count</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(balances.PendingDebtsCount + balances.ClearedDebtsCount)</b></RadzenText>
                    </RadzenStack>
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mb-0">Pending Debt Count</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@balances.PendingDebtsCount</b></RadzenText>
                    </RadzenStack>
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mb-0">Cleared Debt Count</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@balances.ClearedDebtsCount</b></RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        </div>

    </div>

    <div>
        <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
            <RadzenRow>
                <RadzenColumn Size="12">
                    <h4>Total Inflow, Outflow, Debt</h4>
                    <RadzenChart>
                        <RadzenColumnSeries Data="@financialData" CategoryProperty="Category" Title="Financial Totals" ValueProperty="Value">
                            <RadzenSeriesDataLabels Visible="true" />
                        </RadzenColumnSeries>
                        <RadzenValueAxis Formatter="@FormatAsCurrency">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Amount" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </div>

    <div class="d-flex flex-row align-items-start justify-content-center">
                
        <div class="d-flex flex-column">
            <div class="mt-5 p-4" style="background-color: #5A189A">
                <h4 class="text-center">Pending Debts</h4>
                <div class="d-flex flex-row align-items-start justify-content-center" style="gap: 10px">
                    <div>
                        <label>Date From</label>
                        <input type="date" class="form-control" @bind="filterDateFrom" />
                    </div>
                    <div>
                        <label>Date To</label>
                        <input type="date" class="form-control" @bind="filterDateTo" />
                    </div>
                </div>

                <table class="table table-striped table-bordered table-hover b mt-4" style="background-color:#E0AAFF; border-radius: 10px; overflow: hidden;">
                    <thead>
                        <tr>
                            <th style="color:#240046">Id</th>
                            <th style="color:#240046">Category</th>
                            <th style="color:#240046">Tag</th>
                            <th style="color:#240046">Amount</th>
                            <th style="color:#240046">Due Date</th>
                            <th style="color:#240046">Title</th>
                            <th style="color:#240046">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (pendingDebtDetails.Any())
                        {
                            @foreach (var pendingDebt in filteredPendingDebts)
                            {
                                <tr>
                                    <th style="color:#ff0000">@pendingDebt.TransactionId</th>
                                    <th style="color:#ff0000">@pendingDebt.Category</th>
                                    <th style="color:#ff0000">@pendingDebt.Tag</th>
                                    <th style="color:#ff0000">@pendingDebt.Amount</th>
                                    <th style="color:#ff0000">@pendingDebt.DueDate</th>
                                    <th style="color:#ff0000">@pendingDebt.Title</th>
                                    <th>
                                        <button class="btn btn-primary" @onclick="() => UpdateStatus(pendingDebt.DebtId)">
                                            Clear
                                        </button>
                                    </th>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    

    

    
    
    

    

    @if (showErrorModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Exception Occured.</h5>
                        <button type="button" class="btn-close" @onclick="CloseErrorModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label>@errorMessage</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {

    private bool showErrorModal = false;
    private string errorMessage;

    private void CloseErrorModal()
    {
        showErrorModal = false;
    }

    private User loggedInUser = new User();
    private BalanceDTO balances = new BalanceDTO();

    private List<Transaction> userTransactions = new List<Transaction>();

    private List<Transaction> creditTransactions = new List<Transaction>();
    private List<Transaction> debitTransactions = new List<Transaction>();
    private List<Transaction> debtTransactions = new List<Transaction>();

    private List<Debt> debts = new List<Debt>();
    private List<DebtDetailsDTO> debtDetails = new List<DebtDetailsDTO>();

    private List<DebtDetailsDTO> pendingDebtDetails = new List<DebtDetailsDTO>();
    private List<DebtDetailsDTO> clearedDebtDetails = new List<DebtDetailsDTO>();

    private List<TopTransactionDTO> topTransactions = new List<TopTransactionDTO>();

    private IEnumerable<TopTransactionDTO> filteredTransactions => FilterTransactions();
    private IEnumerable<TopTransactionDTO> sortedTransactions => SortTransactions(filteredTransactions);
    private string sortDirection = "Highest"; //Default sort diretion is highest to lowest

    private IEnumerable<DebtDetailsDTO> filteredPendingDebts => FilterPendingDebts();

    private DateTime? filterDateFrom;
    private DateTime? filterDateTo;

    protected override async Task OnInitializedAsync()
    {
        while (!authStateService.IsDataLoaded)
        {
            await Task.Delay(100); // Wait until data is loaded
        }

        loggedInUser = authStateService.GetLoggedInUser();
        balances = authStateService.GetBalances();
        userTransactions = authStateService.UserTransactions;
        creditTransactions = authStateService.CreditTransactions;
        debitTransactions = authStateService.DebitTransactions;
        debtTransactions = authStateService.DebtTransactions;
        debts = authStateService.Debts;
        debtDetails = authStateService.DebtDetails;
        pendingDebtDetails = authStateService.PendingDebtDetails;
        clearedDebtDetails = authStateService.ClearedDebtDetails;

        topTransactions = ConvertToDTO(userTransactions);
    }

    private List<TopTransactionDTO> ConvertToDTO(List<Transaction> userTransactions)
    {
        foreach (Transaction userTransaction in userTransactions)
        {
            TopTransactionDTO topTransactionDTO = new TopTransactionDTO(
                userTransaction.TransactionId, userTransaction.Title, userTransaction.Amount, 
                userTransaction.Category, userTransaction.CreatedDate, userTransaction.Tag);
            topTransactions.Add(topTransactionDTO);
        }
        return topTransactions;
    }

    private IEnumerable<TopTransactionDTO> FilterTransactions()
    {
        var filtered = topTransactions.AsQueryable();
        return filtered;
    }

    private IEnumerable<TopTransactionDTO> SortTransactions(IEnumerable<TopTransactionDTO> filteredTransactions)
    {
        return (sortDirection) switch
        {
            ("Highest") => filteredTransactions.OrderByDescending(t => t.Amount).Take(5),
            ("Lowest") => filteredTransactions.OrderBy(t => t.Amount).Take(5),
            _ => filteredTransactions
        };
    }

    private IEnumerable<DebtDetailsDTO> FilterPendingDebts()
    {
        var filtered = pendingDebtDetails.AsQueryable();
        if (filterDateFrom.HasValue || filterDateTo.HasValue)
        {
            filtered = filtered.Where(t =>
                (!filterDateFrom.HasValue || t.DueDate.Date >= filterDateFrom.Value.Date) &&
                (!filterDateTo.HasValue || t.DueDate.Date <= filterDateTo.Value.Date));
        }
        return filtered;
    }


    private async Task UpdateStatus(int updateDebtId)
    {
        try
        {
            var updateDebt = debtDetails.FirstOrDefault(d => d.DebtId == updateDebtId);
            if (updateDebt.Amount > (balances.CurrentBalance - balances.PendingDebt))
            {
                errorMessage = $"Not enough funds to clear debt.";
                throw new Exception(errorMessage);
            }

            await debtService.ClearDebtAsync(updateDebtId);


            // Updating values in local scope (to display changes until page reloads)
            pendingDebtDetails.Remove(updateDebt);
            clearedDebtDetails.Add(updateDebt);

            balances.PendingDebt -= updateDebt.Amount;
            balances.ClearedDebt += updateDebt.Amount;
            balances.PendingDebtsCount--;
            balances.ClearedDebtsCount++;

            balances.CurrentBalance -= updateDebt.Amount;

            errorMessage = "Debt Cleared Successfully.";
            showErrorModal = true;

            // reloading the page
            navigationManager.NavigateTo("/dashboard");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while clearing the debt: {ex.Message}";
            Console.WriteLine(errorMessage); // Log for debugging
            showErrorModal = true;
        }
        
    }

    class DataItem
    {
        public string Category { get; set; }
        public double Value { get; set; }
    }

    private IEnumerable<DataItem> debtData => new List<DataItem>
    {
        new DataItem { Category = "Pending Debt", Value = balances.PendingDebt },
        new DataItem { Category = "Cleared Debt", Value = balances.ClearedDebt }
    };

    private IEnumerable<DataItem> financialData => new List<DataItem>
    {
        new DataItem { Category = "Total Inflow", Value = balances.TotalInflow },
        new DataItem { Category = "Total Outflow", Value = balances.TotalOutflow },
        new DataItem { Category = "Total Debt", Value = (balances.PendingDebt + balances.ClearedDebt) }
    };

    private string FormatAsCurrency(object value) => $"{loggedInUser.Currency} {value}";

}
