@page "/addTransactions"
@using CredWatch.Models
@using CredWatch.Services
@using CredWatch.DTOs
@inject ITransactionService transactionService
@inject IDebtService debtService
@inject NavigationManager navigationManager
@inject AuthStateService authStateService

<h3>AddTransactions</h3>
<div>
    <p>
        Track your Transactions.     
    </p>

    <div class="rz-p-0 rz-p-md-12">
        <RadzenCard Variant="Variant.Outlined" class="rz-my-12 rz-mx-auto" Style="max-width: 420px;">
            <RadzenStack Gap="1rem" class="rz-p-4">

                <RadzenFormField Text="Transaction Category" Variant="Variant.Outlined">
                    <RadzenDropDown @bind-Value="transaction.Category" TextProperty="Text" ValueProperty="Value" Data="categories" Placeholder="Select a category" />
                    <RadzenRequiredValidator Component="transaction.Category" Text="Transaction category is required" />
                </RadzenFormField>

                <RadzenFormField Text="Title" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="transaction.Title" />
                    <RadzenRequiredValidator Component="transaction.Title" Text="Title is required" />
                </RadzenFormField>

                @* Debt Source and Due Date for Debt Category *@
                @if (transaction.Category == "Debt")
                {
                    <RadzenFormField Text="Debt Source" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="debt.Source" />
                        <RadzenRequiredValidator Component="debt.Source" Text="Debt source is required" />
                    </RadzenFormField>

                    <RadzenFormField Text="Due Date" Variant="Variant.Outlined">
                        <RadzenDatePicker @bind-Value="debt.DueDate" />
                        <RadzenRequiredValidator Component="debt.DueDate" Text="Due date is required" />
                    </RadzenFormField>
                }

                <RadzenFormField Text="Amount" Variant="Variant.Outlined">
                    <RadzenNumeric @bind-Value="transaction.Amount" />
                    <RadzenRequiredValidator Component="transaction.Amount" Text="Amount is required" />
                </RadzenFormField>

                <RadzenFormField Text="Tag Type" Variant="Variant.Outlined">
                    <RadzenDropDown @bind-Value="tagType" Data="tagTypes" Placeholder="Select tag type" />
                    <RadzenRequiredValidator Component="tagType" Text="Tag type is required" />
                </RadzenFormField>

                @* Existing Tag or Custom Tag Based on Tag Type *@
                @if (tagType == "Existing")
                {
                    <RadzenFormField Text="Existing Tag" Variant="Variant.Outlined">
                        <RadzenDropDown @bind-Value="transaction.Tag" Data="existingTags" Placeholder="Select a tag" />
                        <RadzenRequiredValidator Component="transaction.Tag" Text="Existing tag is required" />
                    </RadzenFormField>
                }
                else
                {
                    <RadzenFormField Text="Custom Tag" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="transaction.Tag" />
                        <RadzenRequiredValidator Component="transaction.Tag" Text="Custom tag is required" />
                    </RadzenFormField>
                }

                <RadzenFormField Text="Note" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="transaction.Note" />
                </RadzenFormField>

                <RadzenButton Text="Save Transaction" Click="SaveTransaction" Style="margin-top: 1rem;" />
            </RadzenStack>
        </RadzenCard>
    </div>
</div>

@if (showErrorModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Exception Occured.</h5>
                    <button type="button" class="btn-close" @onclick="CloseErrorModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>@errorMessage</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {

    private User loggedInUser = new User();
    private BalanceDTO balances = new BalanceDTO();

    private Transaction transaction = new Transaction();
    private Debt debt = new Debt();
    private string tagType;

    private List<dynamic> categories = new()
    {
        new { Text = "Credit", Value = "Credit" },
        new { Text = "Debit", Value = "Debit" },
        new { Text = "Debt", Value = "Debt" }
    };
    private List<string> tagTypes = new() { "Custom", "Existing" };

    private List<string> existingTags = new() { "Yearly", "Monthly", "Rent", "Fuel", "Food and Drinks", "Clothes", "Health Loan", "Student Loan", "Others" };

    private String errorMessage;

    private bool showErrorModal = false;

    private void CloseErrorModal()
    {
        showErrorModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = authStateService.GetLoggedInUser();
        balances = authStateService.GetBalances();
    }

    private async Task SaveTransaction()
    {
        //Getting logged in user
        try
        {
            // Input Validation
            if (string.IsNullOrWhiteSpace(transaction.Category) ||
               string.IsNullOrWhiteSpace(transaction.Title) ||
               string.IsNullOrWhiteSpace(transaction.Amount.ToString()) ||
               (transaction.Category == "Debt" && (string.IsNullOrWhiteSpace(debt.Source) || debt.DueDate == null)) ||
               (tagType == "Existing" && string.IsNullOrWhiteSpace(transaction.Tag)) ||
               (tagType == "Custom" && string.IsNullOrWhiteSpace(transaction.Tag)))
            {
                errorMessage = "All fields are required.";
                Console.WriteLine(errorMessage);
                throw new Exception(errorMessage);
            }

            if (transaction.Amount <= 0)
            {
                errorMessage = "Amount must be greater than 0";
                Console.WriteLine(errorMessage);
                throw new Exception(errorMessage);
            }

            transaction.UserId = loggedInUser.UserId;

            try
            {
                // Balance check for outflow
                if (transaction.Category == "Debit")
                {
                    if (transaction.Amount > balances.CurrentBalance)
                    {
                        errorMessage = $"Current Balance is lower than outflow.";
                        throw new Exception(errorMessage);
                    }
                }


                // Saving the new transaction
                int transactionId = await transactionService.SaveTransactionAsync(transaction);

                // save extra info if it is debt
                if (transaction.Category == "Debt")
                {
                    debt.TransactionId = transactionId;
                    debt.IsCleared = false;
                    try
                    {
                        await debtService.SaveDebtAsync(debt);
                    }
                    catch (Exception ex)
                    {
                        errorMessage = $"An error occurred while saving the debt: {ex.Message}";
                        Console.WriteLine(errorMessage); // Log for debugging
                    }
                }

                // Resetting the transaction object
                transaction = new Transaction();
                // Resetting the debt object
                debt = new Debt();
                // Clearing the error message
                errorMessage = null;

                // Redirect to transactions page
                navigationManager.NavigateTo("/viewTransactions");

            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred while saving the transaction: {ex.Message}";
                Console.WriteLine(errorMessage); // Log for debugging
                showErrorModal = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while obtaining the logged in user: {ex.Message}";
            showErrorModal = true;
            Console.WriteLine(errorMessage); // Log for debugging
        }
        
    }


}
